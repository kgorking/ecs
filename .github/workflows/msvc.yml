name: msvc 2022

on: [push]

jobs:
  build:
    #name: "Windows - MSVC"
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2
    #- uses: seanmiddleditch/gha-setup-ninja@master

    - name: Download Ninja
      shell: cmake -P {0}
      run: |
        set(ninja_version "1.11.1")
        
        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-win.zip")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./ninja.zip)

        #execute_process(COMMAND chmod +x ninja)

    - name: Checkout submodules
      run: git submodule update --init --recursive --remote
      
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} "cl")
        set(ENV{CXX} "cl")

        execute_process(
          COMMAND "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat" && set
          OUTPUT_FILE environment_script_output.txt
        )
        file(STRINGS environment_script_output.txt output_lines)
        foreach(line IN LISTS output_lines)
          if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
            set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
          endif()
        endforeach()

        execute_process(
          COMMAND cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=Debug
            -G Ninja
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()


    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %e sec] ")

        file(STRINGS environment_script_output.txt output_lines)
        foreach(line IN LISTS output_lines)
          if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
            set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
          endif()
        endforeach()

        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()


    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ctest --output-on-failure -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
