name: clang-15

on: [push]

jobs:
  sometest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: git submodule update --init --recursive --remote
      
    - name: Install packages
      shell: bash
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get install ninja-build clang-${{ matrix.version }} clang++-${{ matrix.version }} llvm-${{ matrix.version }}-dev libstdc++6 libstdc++-13-dev

  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        version: [13, 14, 15]

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: git submodule update --init --recursive --remote
      
    - name: Install packages
      shell: bash
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get install ninja-build clang-${{ matrix.version }} clang++-${{ matrix.version }} llvm-${{ matrix.version }}-dev libstdc++6 libstdc++-13-dev

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} "/usr/bin/clang-${{ matrix.version }}")
        set(ENV{CXX} "/usr/bin/clang++-${{ matrix.version }}")

        execute_process(
          COMMAND cmake
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=Debug
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=/usr/bin/ninja
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()


    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %e sec] ")

        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "CMake build failed")
        endif()


    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ctest --output-on-failure -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
